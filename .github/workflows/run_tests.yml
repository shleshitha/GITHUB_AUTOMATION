name: Run Code Tests

on:
  push:
    paths:
      - "solutions/**"
  pull_request:
    paths:
      - "tests/**"

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Ensure previous commit is available

      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y gcc g++ openjdk-17-jdk python3 python3-pip
          pip install pytest  # Install pytest for Python tests

      - name: Detect Changed Files
        id: changed-files
        run: |
          BEFORE_COMMIT="${{ github.event.before }}"
          if [ -z "$BEFORE_COMMIT" ] || ! git cat-file -e "$BEFORE_COMMIT"^{commit}; then
            BEFORE_COMMIT=$(git rev-parse HEAD~1)  # Use last commit as fallback
          fi

          CHANGED_FILES=$(git diff --name-only "$BEFORE_COMMIT" HEAD)
          echo "Detected changed files:"
          echo "$CHANGED_FILES"

          if [ -z "$CHANGED_FILES" ]; then
            echo "No file changes detected. Exiting..."
            exit 1
          fi

          # Convert multiline to comma-separated list for environment variable
          FILE_LIST=$(echo "$CHANGED_FILES" | paste -sd "," -)
          echo "CHANGED_FILES=$FILE_LIST" >> $GITHUB_ENV

      - name: Determine File Type
        id: determine-file
        run: |
          if echo "$CHANGED_FILES" | grep -qE 'solutions/.*\.c'; then
            echo "language=C" >> $GITHUB_ENV
          elif echo "$CHANGED_FILES" | grep -qE 'solutions/.*\.cpp'; then
            echo "language=C++" >> $GITHUB_ENV
          elif echo "$CHANGED_FILES" | grep -qE 'solutions/.*\.py'; then
            echo "language=Python" >> $GITHUB_ENV
          elif echo "$CHANGED_FILES" | grep -qE 'solutions/.*\.java'; then
            echo "language=Java" >> $GITHUB_ENV
          else
            echo "No relevant file changes detected. Exiting..."
            exit 1
          fi

      # Run C Tests
      - name: Compile and Run C Program
        if: ${{ env.language == 'C' }}
        run: |
          if [ -f "tests/test_c.c" ]; then
            gcc -o c_test tests/test_c.c solutions/*.c && ./c_test
          else
            echo "No C test file found. Skipping."
          fi

      # Run C++ Tests
      - name: Compile and Run C++ Program
        if: ${{ env.language == 'C++' }}
        run: |
          if [ -f "tests/test_cpp.cpp" ]; then
            g++ -o cpp_test tests/test_cpp.cpp solutions/*.cpp && ./cpp_test
          else
            echo "No C++ test file found. Skipping."
          fi

      # Run Python Tests
      - name: Run Python Tests
        if: ${{ env.language == 'Python' }}
        run: |
          if [ -f "tests/test_python.py" ]; then
            pytest tests/test_python.py
          else
            echo "No Python test file found. Skipping."
          fi

      # Run Java Tests
      - name: Compile and Run Java Program
        if: ${{ env.language == 'Java' }}
        run: |
          if [ -f "tests/MainTest.java" ]; then
            javac -d . solutions/*.java tests/*.java  # Compile Java files
            java tests.MainTest  # Run Java test file
          else
            echo "No Java test file found. Skipping."
          fi
